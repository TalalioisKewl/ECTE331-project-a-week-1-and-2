// I have added the new methods into the code, removed the demo and added my own for the required image. Spent 3hrs correcting the mistakes to be able to finally image to greyscale
//Here is the finished code for project A, will now continue to B.

package ProjectA;

import java.awt.Color;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.IOException;
import javax.imageio.ImageIO;

public class ProblemA {
    public static void main(String[] args) {
        String fileName1 = "C:\\Users\\Talal\\OneDrive\\Desktop\\PROJA\\Rain_Tree.jpg";
        String fileName2 = "C:\\Users\\Talal\\OneDrive\\Desktop\\PROJA\\Wr.jpg";

        colourImage ImgStruct = new colourImage();
        imageReadWrite.readJpgImage(fileName1, ImgStruct); //image loading
        BufferedImage grayImage = convertToGrayscale(ImgStruct); //grey scaling
        BufferedImage equalizedImage = equalizeHistogram(grayImage); //for histogram equalization
        imageReadWrite.writeJpgImage(equalizedImage, fileName2); //here the image is saved in the new jpg file and ready for display
    }

    //the method below converts the jpg image to greyscale
    public static BufferedImage convertToGrayscale(colourImage imgStruct) {
        int width = imgStruct.width;
        int height = imgStruct.height;
        short[][][] pixels = imgStruct.pixels;
//TYPE.INT.RGB is used to set the size for a 24 bit image
        BufferedImage grayImage = new BufferedImage(width, height, BufferedImage.TYPE_INT_RGB);
        for (int y = 0; y < height; y++) {
            for (int x = 0; x < width; x++) {
                short red = pixels[y][x][0];
                short green = pixels[y][x][1];
                short blue = pixels[y][x][2];

                // greyscale calculation
                int grayValue = ((red >> 16) & 255) + ((green >> 8) & 255) + (blue & 255);
                int grayRGB = (grayValue << 16) | (grayValue << 8) | grayValue;

                //the greyscale value is stored in the new jpg file 'Wr.jpg'
                grayImage.setRGB(x, y, grayRGB);
            }
        }

        return grayImage;
    }

    // Histogram Equalization
    public static BufferedImage equalizeHistogram(BufferedImage image) {
        int width = image.getWidth();
        int height = image.getHeight();

        // Histogram calculation
        int[] histogram = calculateHistogram(image);

        // Cumulative Histogram Calculation
        int[] cumulativeHist = calculateCumulativeHistogram(histogram);

        // here the new image is created with histogram equilization
        BufferedImage equalizedImage = new BufferedImage(width, height, BufferedImage.TYPE_INT_RGB);

        int totalPixels = width * height;

        for (int y = 0; y < height; y++) {
            for (int x = 0; x < width; x++) {
                int pixel = image.getRGB(x, y);
                int grayValue = pixel & 255;

                // histogram is applied to the greyscaled image
                int eqGrayValue = (int) (cumulativeHist[grayValue] * 255.0 / totalPixels);
                int eqRGB = (eqGrayValue << 16) | (eqGrayValue << 8) | eqGrayValue;

                // equalized pixel values are set to the image file
                equalizedImage.setRGB(x, y, eqRGB);
            }
        }

        return equalizedImage;
    }

    // this is the utility method to calculate histogram of the image
    private static int[] calculateHistogram(BufferedImage image) {
        int[] histogram = new int[256];
        int width = image.getWidth();
        int height = image.getHeight();

        // the arrays are initialized for the histogram at 255
        for (int i = 0; i < 256; i++) {
            histogram[i] = 0;
        }

        // Histogram calculation again
        for (int y = 0; y < height; y++) {
            for (int x = 0; x < width; x++) {
                int pixel = image.getRGB(x, y);
                int grayValue = pixel & 255;
                histogram[grayValue]++;
            }
        }

        return histogram;
    }

    // calculating cumulative histogram here
    private static int[] calculateCumulativeHistogram(int[] histogram) {
        int[] cumulativeHist = new int[256];
        cumulativeHist[0] = histogram[0];

        // cumulative histogram calculation again
        for (int i = 1; i < 256; i++) {
            cumulativeHist[i] = cumulativeHist[i - 1] + histogram[i];
        }

        return cumulativeHist;
    }
}
class imageReadWrite {

    public static void readJpgImage(String fileName, colourImage ImgStruct) {
        try {
            // Read the image file
            File file = new File(fileName);
            BufferedImage image = ImageIO.read(file);

            System.out.println("file: " + file.getCanonicalPath());

            // Check if the image is in sRGB color space
            if (!image.getColorModel().getColorSpace().isCS_sRGB()) {
                System.out.println("Image is not in sRGB color space");
                return;
            }

            // Get the width and height of the image
            int width = image.getWidth();
            int height = image.getHeight();
            ImgStruct.width = width;
            ImgStruct.height = height;
            ImgStruct.pixels = new short[height][width][3];

            // Loop over each pixel of the image and store its RGB color components in the array
            for (int y = 0; y < height; y++) {
                for (int x = 0; x < width; x++) {
                    // Get the color of the current pixel
                    int pixel = image.getRGB(x, y);
                    Color color = new Color(pixel, true);

                    // Store the red, green, and blue color components of the pixel in the array
                    ImgStruct.pixels[y][x][0] = (short) color.getRed();
                    ImgStruct.pixels[y][x][1] = (short) color.getGreen();
                    ImgStruct.pixels[y][x][2] = (short) color.getBlue();
                }
            }

        } catch (IOException e) {
            System.out.println("Error reading image file: " + e.getMessage());
        }
    }

    public static void writeJpgImage(BufferedImage image, String fileName) {
        try {
            // Write the BufferedImage to a JPEG file
            File outputFile = new File(fileName);
            ImageIO.write(image, "jpg", outputFile);

        } catch (IOException e) {
            System.out.println("Error writing image file: " + e.getMessage());
        }
    }
}

class matManipulation {
    /**
     * reshape a matrix to a 1-D vector
     */
    public static void mat2Vect(short[][] mat, int width, int height, short[] vect) {
        for (int i = 0; i < height; i++) {
            for (int j = 0; j < width; j++) {
                vect[j + i * width] = mat[i][j];
            }
        }
    }
}

class colourImage {
    /**
     * A data structure to store a colour image
     */
    public int width;
    public int height;
    public short pixels[][][];
}
